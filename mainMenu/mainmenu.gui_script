--_G.username = ""
local is_main_loaded = false 

function init(self)
	-- Acquire input focus for this GUI
	msg.post(".", "acquire_input_focus")
	-- Initialize message
	--self.message = ""
	-- Show keyboard
	--gui.show_keyboard(gui.KEYBOARD_TYPE_DEFAULT, false)
	-- Get reference to the continue button	
	-- self.continuebutton = gui.get_node("Enter")
	-- self.enter = gui.get_text(label_node)
end
local function enableName(action)
	gui.set_enabled(gui.get_node("gameName"), action)
	gui.set_enabled(gui.get_node("Enter"), action)
end

local function enableSettings (action)
	gui.set_enabled(gui.get_node("settingsTitle"), action)
	--gui.set_enabled(gui.get_node("popupBackground"), action)
	--gui.set_enabled(gui.get_node("closeText"), action)
	gui.set_enabled(gui.get_node("settingScreen"), action)
	enableName(false)
end

local function enableInfo (action)
	gui.set_enabled(gui.get_node("infoTitle"), action)
	--gui.set_enabled(gui.get_node("popupBackground"), action)
	--gui.set_enabled(gui.get_node("closeText"), action)
	gui.set_enabled(gui.get_node("infoScreen"), action)
	enableName(false)
end

local function enableProfile (action, tableData)
	local strings = {
		"profileTitle",
		"firstname",
		"lastname",
		"username",
		"gamesplayed",
		"timeplayed",
		"highscore",
		"profileAvgScore",
		"profileNameLabel",
		"profileLastnameLabel",
		"profileUsernameLabel",
		"profileTimePlayedLabel",
		"profileGamesPlayedLabel",
		"profileHighScoreLabel",
		"profileAvgScoreLabel",
	}
	for  i = 1, #strings do			
		gui.set_enabled(gui.get_node(strings[i]), action)				
	end	
	if tableData then
		gui.set_text(gui.get_node("username"), tableData.username)
		gui.set_text(gui.get_node("lastname"), tableData.lastname)
		gui.set_text(gui.get_node("firstname"), tableData.firstname)
		gui.set_text(gui.get_node("timeplayed"), tableData.timeplayed)
		gui.set_text(gui.get_node("gamesplayed"), tableData.gamesplayed)
		gui.set_text(gui.get_node("highscore"), tableData.highscore)
		local avgscore = 30
		gui.set_text(gui.get_node("profileAvgScore"), avgscore)
	end	
	enableName(false)
	
	--gui.set_enabled(gui.get_node("popupBackground"), action)
--	gui.set_enabled(gui.get_node("closeText"), action)
	--gui.set_enabled(gui.get_node("infoScreen"), true)
end

local function enableBkgdAndClose(action)
	gui.set_enabled(gui.get_node("popupBackground"), action)
	gui.set_enabled(gui.get_node("closeText"), action)
end

local function disableAll (action)
	enableProfile(false)
	enableInfo(false)
	enableSettings(false)
	enableBkgdAndClose(false)
	enableName(true)
	--gui.set_enabled(gui.get_node("profileTitle"), action)
	--gui.set_enabled(gui.get_node("popupBackground"), action)
	--	gui.set_enabled(gui.get_node("closeText"), action)
	--gui.set_enabled(gui.get_node("infoScreen"), true)
end

local function get_profile()
	--local found  = table.find(_G.profileTable, first_name .. last_name)
	--local rows = table.maxn(_G.profileTable)
	--pprint(_G.profileTable)

	-- Print the players table
	--print_table(_G.profileTable)

	--print("ROWS==", rows)
	local playerFileName = _G.username .. "_player_profile"
	local filename = sys.get_save_file("sys_save_load", playerFileName)

	--local filename = sys.get_save_file("sys_save_load", "player_profile")
	print("CFILE===", filename)
	local data = sys.load(filename)
	for key, value in pairs(data) do
		print(key, value)
	end
	pprint("CDATA===", data)
	return data	
end


function on_input(self, action_id, action)
	if action_id == hash("enter") then
	-- if action.pressed and gui.pick_node(gui.get_node("play/bg"), action.x, action.y) then
	-- msg.post("controller:/controller", "show_game")
		msg.post("controller:/controller", "show_game")
	end

	print("GBOX==", gui.get_node("gBox"))
	
	if action.pressed and gui.pick_node(gui.get_node("gBox"), action.x, action.y) then
		print("SET==")
		enableSettings(true)
		enableBkgdAndClose(true)
		enableInfo(false)
		enableProfile(false)
		--local gNameNode = gui.get_node("gameName")
		--local enterNode = gui.get_node("Enter")
		--[[gui.set_enabled(gui.get_node("settingsTitle"), true)
		gui.set_enabled(gui.get_node("popupBackground"), true)
		gui.set_enabled(gui.get_node("closeText"), true)
		gui.set_enabled(gui.get_node("settingScreen"), true)--]]
		--gui.set_enabled(gNameNode, false)
		--gui.set_enabled(enterNode, false)		
	end

	if action.pressed and gui.pick_node(gui.get_node("iBox"), action.x, action.y) then
		print("iBox==")
		enableSettings(false)
		enableInfo(true)
		enableBkgdAndClose(true)
		enableProfile(false)
		--[[local iBoxNode = gui.get_node("infoTitle")
		local closeNode = gui.get_node("closeText")
		local backNode = gui.get_node("popupBackground")
		--local gNameNode = gui.get_node("gameName")
		--local enterNode = gui.get_node("Enter")
		gui.set_enabled(iBoxNode, true)
		gui.set_enabled(closeNode, true)
		gui.set_enabled(backNode, true)--]]		
	end

	if action.pressed and gui.pick_node(gui.get_node("pBox"), action.x, action.y) then
		print("pBox==", _G.username)
		enableSettings(false)
		enableInfo(false)
		enableBkgdAndClose(true)
		local data = get_profile()
		pprint("CD==",data)		
		enableProfile(true, data)
		--local gNameNode = gui.get_node("gameName")
		--local enterNode = gui.get_node("Enter")
		--[[gui.set_enabled(gui.get_node("profileTitle"), true)
		gui.set_enabled(gui.get_node("closeText"), true)
		gui.set_enabled(gui.get_node("popupBackground"), true)--]]
		--gui.set_enabled(gNameNode, false)
		gui.set_text(gui.get_node("profileUsername"), data.username)
		gui.set_text(gui.get_node("profileFirstname"), data.firstname)
		gui.set_text(gui.get_node("profileLastname"), data.lastname)
		
	end
	
	if action.pressed and gui.pick_node(gui.get_node("closeText"), action.x, action.y) then
		disableAll(false)
		--[[local iBoxNode = gui.get_node("infoTitle")
		local profileNode = gui.get_node("profileTitle")
		local gBoxNode = gui.get_node("settingsTitle")
		local closeNode = gui.get_node("closeText")
		local backNode = gui.get_node("popupBackground")
		--local gNameNode = gui.get_node("gameName")
		--local enterNode = gui.get_node("Enter")
		gui.set_enabled(profileNode, false)
		gui.set_enabled(iBoxNode, false)
		gui.set_enabled(gBoxNode, false)
		gui.set_enabled(closeNode, false)
		gui.set_enabled(backNode, false)--]]
	end
end

--[[function on_input(self, action_id, action)
	if action_id == hash("enter") then
		-- if action_id == hash("touch") then
		-- Check if the touch event is on the continue button
		-- if gui.pick_node(self.Enter, action.x, action.y) then
			print("Continue button clicked")

			-- Get the text from the label node
			--local label_node = gui.get_node("labelidhere")
			-- _G.username = gui.get_text(label_node)
			-- print("Username set to:", _G.username)

			-- Load the main collection if it's not already loaded
			if not is_main_loaded then
				-- print("Loading game.collection...")
				-- msg.post("controller:/controller#gameproxy", "load")
				print("Loading game.collection...")
				msg.post("controller:/controller#gameproxy", "show_game")
				is_main_loaded = true
			else
				print("Gameplay collection is already loaded.")
			end
		-- end
	end

	-- Handle text input
	if action_id == hash("type") then
		self.message = self.message .. action.text
		local label_node = gui.get_node("labelidhere")
		gui.set_text(label_node, self.message)
	elseif action_id == hash("backspace") and action.repeated then
		local l = string.len(self.message)
		self.message = string.sub(self.message, 0, l - 1)
		local label_node = gui.get_node("labelidhere")
		gui.set_text(label_node, self.message)
	end
end
--]]
function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then

		-- New world is loaded. Init and enable it.
		msg.post(sender, "init")
		msg.post(sender, "enable")

		-- Disable GUI elements from the current screen
		gui.set_enabled(gui.get_node("Enter"), false)
		gui.set_enabled(gui.get_node("gameName"), false)
		-- gui.set_enabled(gui.get_node("textureN"), false)
		-- gui.set_enabled(gui.get_node("labelidhere"), false)
		-- Optionally disable or remove the entire opening collection if necessary
		is_main_loaded = true
	end
end

--[[function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		print("Collection loaded:", sender)
		-- Disable GUI elements from the current screen
		gui.set_enabled(gui.get_node("continuebutton"), false)
		gui.set_enabled(gui.get_node("labelidhere"), false)
		-- Optionally disable or remove the entire opening collection if necessary
		is_main_loaded = true
	elseif message_id == hash("proxy_unloaded") then
		print("Collection unloaded:", sender)
		is_main_loaded = false
	end
end--]]


--[[function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		msg.post(".", "enable")
		msg.post(".", "acquire_input_focus")
	elseif message_id == hash("hide") then
		msg.post(".", "disable")
		msg.post(".", "release_input_focus")
	end
end

function on_input(self, action_id, action)
	if action.released and gui.pick_node(gui.get_node("play_level"), action.x, action.y) then
		msg.post("controller", "show_level_menu", { level_id = 1234 })
	end
end--]]

-- the functions animX represents the animation time-line
-- first is anim1 executed, when finished anim2 is executed, etc
-- anim1 to anim4 creates a bouncing rubber effect.
-- anim5 fades down alpha and is only used for the background

--[[local function anim5(self, node)
	if gui.get_node("background") == node then
		-- special case for background. animate alpha to 60%
		local to_color = gui.get_color(node)
		to_color.w = 0.6
		gui.animate(node, gui.PROP_COLOR, to_color, gui.EASING_OUTCUBIC, 2.4, 0.1)
	end
end

local function anim4(self, node)
	-- animate scale to 100%
	local s = 1
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUTCUBIC, 0.24, 0, anim5)
end

local function anim3(self, node)
	-- animate scale to 106%
	local s = 1.06
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUTCUBIC, 0.24, 0, anim4)
end

local function anim2(self, node)
	-- animate scale to 98%
	local s = 0.98
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUTCUBIC, 0.24, 0, anim3)
end

local function anim1(node, d)
	-- set scale to 70%
	local start_scale = 0.7
	gui.set_scale(node, vmath.vector4(start_scale, start_scale, start_scale, 0))

	-- get current color and set alpha to 0 to fade up
	local from_color = gui.get_color(node)
	local to_color = gui.get_color(node)
	from_color.w = 0
	gui.set_color(node, from_color)

	-- animate alpha value from 0 to 1
	gui.animate(node, gui.PROP_COLOR, to_color, gui.EASING_INOUTCUBIC, 0.4, d)

	-- animate scale from %70 to 110%
	local s = 1.1
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUTCUBIC, 0.4, d, anim2)
end

function init(self)
	-- start animations for all nodes
	-- background, button-boxes and text are animated equally
	-- d is the animation start delay
	local d = 0.4
	anim1(gui.get_node("new_game"), d)
	anim1(gui.get_node("new_game_shadow"), d)
	anim1(gui.get_node("new_game_button"), d)

	d = 0.3
	anim1(gui.get_node("quit"), d)
	anim1(gui.get_node("quit_shadow"), d)
	anim1(gui.get_node("quit_button"), d)

	d = 0.1
	anim1(gui.get_node("background"), d)
end--]]