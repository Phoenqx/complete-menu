
--[[function init(self)
	msg.post(".", "acquire_input_focus")

	-- a list of different bullet prototypes
	self.bullets = {
		"/examples/factory/dynamic/flame.goc",
		"/examples/factory/dynamic/lightning.goc",
		"/examples/factory/dynamic/rock.goc",
	}
	-- the currently used bullet prototype
	self.bullet_index = 1

	-- shoot one bullet per second
	-- animate the bullet up 1000 pixels and then delete it
	timer.delay(0.2, true, function()
		local id = factory.create("#bulletfactory")
		local to = go.get_position(id)
		to.y = to.y + 1000
		go.animate(id, "position", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_LINEAR, 1.5, 0, function()
			go.delete(id)
		end)
	end)
end

function on_input(self, action_id, action)
	-- mouse or spacebar
	if (action_id == hash("touch") or action_id == hash("action")) and action.pressed then
		-- next bullet prototype, wrap around to the first
		self.bullet_index = self.bullet_index + 1
		if self.bullet_index > #self.bullets then
			self.bullet_index = 1
		end

		-- unload current prototype
		factory.unload("#dynamicFactory")

		-- set a new prototype
		local prototype = self.bullets[self.bullet_index]
		factory.set_prototype("#dynamicFactory", prototype)
	end
end--]]

--attemt next
--[[
function init(self)
	msg.post(".", "acquire_input_focus")

	-- List of different object prototypes
	self.objects = {
		"/dynamic/drone.goc",
		"/dynamic/enemyBirds.goc",
		"/dynamic/plane.goc",
	}
	-- The currently used object prototype
	self.object_index = 1

	-- Cycle through object prototypes automatically every 5 seconds (or adjust as needed)
	self.prototype_change_timer = 5  -- Time in seconds between prototype changes
	self.elapsed_time = 0

	-- Spawn objects from right to left automatically
	timer.delay(0.5, true, function()
		-- Randomly choose an object prototype
		local prototype = self.objects[self.object_index]

		-- Create a new object at the right edge, with a random vertical position
		local spawn_position = vmath.vector3(1024, math.random(0, 600), 1) -- 1024 is the screen width
		local id = factory.create("#dynamicFactory", spawn_position)

		-- Animate the object from right to left
		local to = vmath.vector3(-100, spawn_position.y, 1) -- Move to the left (off-screen)
		local duration = math.random(2, 5) -- Random movement speed (2 to 5 seconds)

		-- Animate the object
		go.animate(id, "position", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_LINEAR, duration, 0, function()
			-- After animation completes, delete the object
			go.delete(id)
		end)
		-- unload current prototype
		--factory.unload("#dynamicFactory")
	
		-- Change object prototype automatically
		self.object_index = self.object_index + 1
		if self.object_index > #self.objects then
			self.object_index = 1  -- Loop back to the first object prototype
			-- set a new prototype
			--local prototype = self.obstacles[self.obstacle_index]
			--factory.set_prototype("#dynamicFactory", prototype)
		end
		
	end)

	-- Timer to automatically change the prototype periodically
	timer.delay(self.prototype_change_timer, true, function()
		-- Automatically cycle to the next prototype after the delay
		self.object_index = self.object_index + 1
		if self.object_index > #self.objects then
			self.object_index = 1  -- Wrap around to the first prototype if we go past the last
		end
	end)
end--]]




function init(self)
	math.randomseed(os.time())
	msg.post(".", "acquire_input_focus")

	-- A list of different obstacle prototypes
	self.obstacles = {
		"/dynamic/plane.goc",
		"/dynamic/drone.goc",
		"/dynamic/enemyBirds.goc",
	}
	-- The currently used obstacle prototype
	self.obstacle_index = 1

	-- Number of obstacles to spawn at a time
	self.obstacles_to_spawn = 1  -- Set the desired number of obstacles

	-- Function to spawn obstacles
	local function spawn_obstacles()
		for i = 1, self.obstacles_to_spawn do
			local id = factory.create("#dynamicFactory")

			-- Set random position off the right side of the screen
			local from_x = math.random(800, 1000)  -- Random x position off the right side

			-- Adjust from_y to ensure obstacles are spread across the Y-axis
			local from_y = math.random(0, 600)     -- Replace 600 with your actual screen height
			local from = vmath.vector3(from_x, from_y, 1) 
			go.set_position(from, id)

			-- Move to the left
			local to_x = from_x - 1000
			local to = vmath.vector3(to_x, from_y, 0)

			-- Check if the current prototype is the bird and apply wave movement
			if self.obstacles[self.obstacle_index] == "/dynamic/enemyBirds.goc" then
				go.animate(id, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(-100,from_y,1), go.EASING_LINEAR, math.random(5, 7.5), 0, function()
					go.delete(id)
				end)

				-- Start wave movement coroutine
				local wave_amplitude = 30  -- Adjust wave amplitude
				local wave_frequency = 2    -- Adjust wave frequency
				local wave_duration = 5     -- Duration for the wave movement

				local start_time = os.clock()
				local function wave_movement()
					while true do
						local elapsed = os.clock() - start_time
						local wave_offset = wave_amplitude * math.sin(elapsed * wave_frequency)
						local current_y = from_y + wave_offset
						go.set_position(vmath.vector3(from_x, current_y, 1), id)
						coroutine.yield()
					end
				end

				-- Create a coroutine for the wave movement
				local co = coroutine.create(wave_movement)

				-- Update coroutine in the main loop
				timer.delay(0, true, function()
					coroutine.resume(co)
				end)
			else
				-- Animate without wave movement for other obstacles
				--vmath.vector(-100,from_y,1)
				go.animate(id, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(-100,from_y,1), go.EASING_LINEAR, math.random(5, 7.5), 0, function()
					go.delete(id)
				end)
			end

			-- unload current prototype
			factory.unload("#dynamicFactory")

			-- set a new prototype
			local prototype = self.obstacles[self.obstacle_index]
			factory.set_prototype("#dynamicFactory", prototype)

			-- Update the obstacle index for the next spawn
			self.obstacle_index = self.obstacle_index + 1
			if self.obstacle_index > #self.obstacles then
				self.obstacle_index = 1
			end
		end
	end

	-- Spawn obstacles at random intervals
	timer.delay(2, true, spawn_obstacles)  -- Adjust the delay for spawn frequency
end

function on_input(self, action_id, action)
	-- No user input handling needed
end
