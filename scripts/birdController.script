--[[go.property("ballrotprop", 0)
function init(self)
	self.xspeed = 0
	self.yspeed = 0
	self.ballrot = self.ballrotprop
end--]]

--[[function update(self, dt)
	--local ballrot
	--Makes 361 degrees = 1 degree
	if self.ballrot >= 360 then
		self.ballrot = self.ballrot - 360
	end
	if self.ballrot < 0 then
		self.ballrot = self.ballrot + 360
	end
end--]]

--[[function update(self, dt)
	local ballrot = self.ballrot % 360 -- keep it in range [0,359]

	local radians = math.rad(ballrot) -- convert from degrees to radians

	-- rotate the vector (1,0) on the unit circle
	-- the resulting vector has the length 1
	local direction_x = math.cos(radians)
	local direction_y = math.sin(radians)

	-- update the position
	local pos = go.get_position()
	pos = pos + vmath.vector3(direction_x, direction_y, 0) * speed * dt
	go.set_position(pos)

end--]]


--[[go.property("angular_velocity", 5)
go.property("linear_velocity", 900)

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("camera", "acquire_camera_focus")

	-- current direction of rotation
	self.rotate = 0
end

function final(self)
	msg.post(".", "release_input_focus")
	msg.post("camera", "release_camera_focus")
end

function update(self, dt)
	-- rotate based on user input and angular velocity (radians per second)
	local rotation = go.get_rotation()
	rotation = rotation * vmath.quat_rotation_z(self.angular_velocity * self.rotate * dt)
	go.set_rotation(rotation)

	-- move in direction of rotation with linear velocity (pixels per second)
	local pos = go.get_position()
	local distance = self.linear_velocity * dt
	local direction = vmath.rotate(rotation, vmath.vector3(0, distance, 0))
	pos = pos + direction
	go.set_position(pos)

	-- update camera position
	go.set_position(pos + vmath.vector3(-568, - 320, 0), "camera")
end

function on_input(self, action_id, action)
	-- set direction of rotation based on user input
	if action_id == hash("left") then
		if action.pressed then
			self.rotate = 1
		elseif action.released then
			self.rotate = 0
		end
	elseif action_id == hash("right") then
		if action.pressed then
			self.rotate = -1
		elseif action.released then
			self.rotate = 0
		end
	end

	-- fire bullets
	-- spawn bullet in front of the spaceship (based on rotation)
	if (action_id == hash("trigger") or action_id == hash("touch")) and action.released then
		local rotation = go.get_rotation()
		local position = go.get_position() + vmath.rotate(rotation, vmath.vector3(0, 60, 0))
		local bullet = factory.create("#bulletfactory", position, rotation)
		local to = position + vmath.rotate(rotation, vmath.vector3(0, 1000, 0))
		go.animate(bullet, "position", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_LINEAR, 0.5, 0, function()
			go.delete(bullet)
		end)
	end
end

function on_message(self, message_id, message, sender)
	-- basic contact separation
	if message_id == hash("contact_point_response") and message.group == hash("wall") then
		go.set_position(go.get_position() + message.normal * message.distance)
	end
end--]]



function init(self)
	msg.post(".", "acquire_input_focus") -- <1>
	self.vel = vmath.vector3() -- <2>    
end

function update(self, dt)
	local pos = go.get_position() -- <3>
	pos = pos + self.vel * dt -- <4>
	go.set_position(pos) -- <5>

	self.vel.x = 0 -- <6>
	self.vel.y = 0
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.vel.y = 150 -- <7>
	elseif action_id == hash("down") then
		self.vel.y = -150
	elseif action_id == hash("left") then
		self.vel.x = -150 -- <8>
	elseif action_id == hash("right") then
		self.vel.x = 150
	end
end

--[[
1. Tell the engine that the current game object ("." is 
shorthand for that) should receive user input to the function
	`on_input()` in its script components.
	2. Construct a vector to indicate velocity. It will initially be
	zero.
	3. Each frame, get the current position and store in `pos`.
	4. Add the velocity, scaled to the current frame length. Velocity
	is therefore expressed in pixels per second.
	5. Set the game object's position to the newly calculated position.
	6. Zero out the velocity. If no input is given, there should be
	no movement.
	7. If the user presses "up", set the y component of the velocity to 150.
	If the user presses "down", set the y component to -150.
	8. Similarly, if the user presses "left", set the x component of the velocity to -150.
	And finally, if the user presses "right", set the x component to 150.
	--]]